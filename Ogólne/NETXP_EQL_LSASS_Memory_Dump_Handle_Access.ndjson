{"id": "f524ade0-9fdb-11ee-a3e5-fd5e9cb555ae", "updated_at": "2023-12-21T08:35:58.529Z", "updated_by": "elastic", "created_at": "2023-12-21T08:35:56.309Z", "created_by": "elastic", "name": "NETXP EQL LSASS Memory Dump Handle Access", "tags": ["OS: Windows", "Domain: Endpoint", "Use Case: Threat Detection", "Tactic: Credential Access"], "interval": "5m", "enabled": true, "description": "Identifies handle requests for the Local Security Authority Subsystem Service (LSASS) object access with specific access masks that many tools with a capability to dump memory to disk use (0x1fffff, 0x1010, 0x120089). This rule is tool agnostic as it has been validated against a host of various LSASS dump tools such as SharpDump, Procdump, Mimikatz, Comsvcs etc. It detects this behavior at a low level and does not depend on a specific tool or dump file name.", "risk_score": 73, "severity": "high", "note": "Triage and analysis\nInvestigating LSASS Memory Dump Handle Access\nLocal Security Authority Server Service (LSASS) is a process in Microsoft Windows operating systems that is responsible for enforcing security policy on the system. It verifies users logging on to a Windows computer or server, handles password changes, and creates access tokens.\n\nAdversaries may attempt to access credential material stored in LSASS process memory. After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. This is meant to facilitate single sign-on (SSO) ensuring a user isn\u2019t prompted each time resource access is requested. These credential materials can be harvested by an adversary using administrative user or SYSTEM privileges to conduct lateral movement using alternate authentication material(opens in a new tab or window).\n\nNote:\nThis investigation guide uses the Osquery Markdown Plugin(opens in a new tab or window) introduced in Elastic Stack version 8.5.0. Older Elastic Stack versions will display unrendered Markdown in this guide.\n\nPossible investigation steps\nInvestigate the process execution chain (parent process tree) for unknown processes. Examine their executable files for prevalence, whether they are located in expected locations, and if they are signed with valid digital signatures.\nInvestigate other alerts associated with the user/host during the past 48 hours.\nExamine the host for derived artifacts that indicate suspicious activities:\nAnalyze the process executable using a private sandboxed analysis system.\nObserve and collect information about the following activities in both the sandbox and the alert subject host:\nAttempts to contact external domains and addresses.\nUse the Elastic Defend network events to determine domains and addresses contacted by the subject process by filtering by the process' process.entity_id.\nExamine the DNS cache for suspicious or anomalous entries.\n\n\nOsquery - Retrieve DNS Cache\nUse the Elastic Defend registry events to examine registry keys accessed, modified, or created by the related processes in the process tree.\nExamine the host services for suspicious or anomalous entries.\n\n\nOsquery - Retrieve All Services\n\n\nOsquery - Retrieve Services Running on User Accounts\n\n\nOsquery - Retrieve Service Unsigned Executables with Virustotal Link\nRetrieve the files' SHA-256 hash values using the PowerShell Get-FileHash cmdlet and search for the existence and reputation of the hashes in resources like VirusTotal, Hybrid-Analysis, CISCO Talos, Any.run, etc.\nInvestigate potentially compromised accounts. Analysts can do this by searching for login events (for example, 4624) to the target host after the registry modification.\nFalse positive analysis\nThere should be very few or no false positives for this rule. If this activity is expected or noisy in your environment, consider adding exceptions \u2014 preferably with a combination of user and command line conditions.\nIf the process is related to antivirus or endpoint detection and response solutions, validate that it is installed on the correct path and signed with the company's valid digital signature.\nResponse and remediation\nInitiate the incident response process based on the outcome of the triage.\nIsolate the involved host to prevent further post-compromise behavior.\nScope compromised credentials and disable the accounts.\nIf the triage identified malware, search the environment for additional compromised hosts.\nImplement temporary network rules, procedures, and segmentation to contain the malware.\nStop suspicious processes.\nImmediately block the identified indicators of compromise (IoCs).\nInspect the affected systems for additional malware backdoors like reverse shells, reverse proxies, or droppers that attackers could use to reinfect the system.\nRemove and block malicious artifacts identified during triage.\nInvestigate credential exposure on systems compromised or used by the attacker to ensure all compromised accounts are identified. Reset passwords for these accounts and other potentially compromised credentials, such as email, business systems, and web services.\nRun a full antimalware scan. This may reveal additional artifacts left in the system, persistence mechanisms, and malware components.\nDetermine the initial vector abused by the attacker and take action to prevent reinfection through the same vector.\nUsing the incident response data, update logging and audit policies to improve the mean time to detect (MTTD) and the mean time to respond (MTTR).\nEnsure advanced audit policies for Windows are enabled, specifically:\nObject Access policies Event ID 4656(opens in a new tab or window) (Handle to an Object was Requested)", "license": "", "output_index": "", "meta": {"from": "1m", "kibana_siem_app_url": "https://10.0.8.140:5601/app/security"}, "author": ["Szymon Gluch"], "false_positives": [], "from": "now-360s", "rule_id": "a57ac761-57c5-486f-8123-4c1f60e56e98", "max_signals": 100, "risk_score_mapping": [], "severity_mapping": [], "threat": [], "to": "now", "references": ["https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4656", "https://attack.mitre.org/techniques/T1003/001/", "https://threathunterplaybook.com/notebooks/windows/06_credential_access/WIN-170105221010.html", "https://threathunterplaybook.com/notebooks/windows/06_credential_access/WIN-170105221010.html"], "version": 1, "exceptions_list": [], "immutable": false, "related_integrations": [], "required_fields": [], "setup": "", "type": "eql", "language": "eql", "index": ["winlogbeat-*", "logs-system.*", "logs-windows.*"], "query": "any where event.action == \"File System\" and event.code == \"4656\" and\n\n    winlog.event_data.ObjectName : (\n        \"?:\\\\Windows\\\\System32\\\\lsass.exe\",\n        \"\\\\Device\\\\HarddiskVolume?\\\\Windows\\\\System32\\\\lsass.exe\",\n        \"\\\\Device\\\\HarddiskVolume??\\\\Windows\\\\System32\\\\lsass.exe\") and\n\n    /* The right to perform an operation controlled by an extended access right. */\n\n    (winlog.event_data.AccessMask : (\"0x1fffff\" , \"0x1010\", \"0x120089\", \"0x1F3FFF\") or\n     winlog.event_data.AccessMaskDescription : (\"READ_CONTROL\", \"Read from process memory\"))\n\n     /* Common Noisy False Positives */\n\n    and not winlog.event_data.ProcessName : (\n        \"?:\\\\Program Files\\\\*.exe\",\n        \"?:\\\\Program Files (x86)\\\\*.exe\",\n        \"?:\\\\Windows\\\\system32\\\\wbem\\\\WmiPrvSE.exe\",\n        \"?:\\\\Windows\\\\System32\\\\dllhost.exe\",\n        \"?:\\\\Windows\\\\System32\\\\svchost.exe\",\n        \"?:\\\\Windows\\\\System32\\\\msiexec.exe\",\n        \"?:\\\\ProgramData\\\\Microsoft\\\\Windows Defender\\\\*.exe\",\n        \"?:\\\\Windows\\\\explorer.exe\",\n        \"?:\\\\Windows\\\\System32\\\\poqexec.exe\")", "filters": [], "throttle": "no_actions", "actions": []}
